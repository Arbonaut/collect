<?xml version="1.0" encoding="utf-8"?>
<view:AbstractReferenceDataImportView xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:component="org.openforis.collect.ui.component.*"
		 xmlns:datagrid="org.openforis.collect.ui.component.datagrid.*"
		 xmlns:view="org.openforis.collect.ui.view.*"
		 skinClass="org.openforis.collect.ui.skin.SamplingDesignImportViewSkin"
		 creationComplete="creationCompleteHandler(event)"
		 >

	<fx:Script>
		<![CDATA[
			import mx.collections.IList;
			import mx.events.FlexEvent;
			
			import org.openforis.collect.i18n.Message;
			import org.openforis.collect.metamodel.proxy.SpatialReferenceSystemProxy;
			import org.openforis.collect.model.proxy.SamplingDesignItemProxy;
			import org.openforis.collect.presenter.SamplingDesignImportPresenter;
			
			import spark.components.gridClasses.GridColumn;
			
			private var _presenter:SamplingDesignImportPresenter;
			private var _surveyId:int;
			private var _work:Boolean;
			private var _spatialReferenceSystems:IList;
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				_presenter = new SamplingDesignImportPresenter(this);
			}
			
			public function levelLabelFunction(item:SamplingDesignItemProxy, column:GridColumn):String {
				var dataField:String = column.dataField;
				var parts:Array = dataField.split("_");
				var levelPosString:String = parts[1];
				var levelPosition:int = int(levelPosString);
				if ( levelPosition <= item.levelCodes.length ) {
					var result:Object = item.levelCodes.getItemAt(levelPosition - 1);
					return String(result);
				} else {
					return "";
				}
			}

			public function srsLabelFunction(item:SpatialReferenceSystemProxy):String {
				//TODO use label
				return item.id;
			}
			
			public function samplingDesignSrsLabelFunction(item:SamplingDesignItemProxy, column:GridColumn = null):String {
				return item.srsId;
			}
			
			public function get surveyId():int {
				return _surveyId;
			}

			public function set surveyId(value:int):void {
				_surveyId = value;
			}

			public function get work():Boolean {
				return _work;
			}

			public function set work(value:Boolean):void {
				_work = value;
			}

			[Bindable]
			public function get spatialReferenceSystems():IList {
				return _spatialReferenceSystems;
			}
			
			public function set spatialReferenceSystems(value:IList):void {
				_spatialReferenceSystems = value;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<component:PopUp id="importPopUp" 
						 title="{Message.get('samplingDesignImport.importPopUpTitle')}">
			<component:layout>
				<s:VerticalLayout horizontalAlign="center" verticalAlign="middle" />
			</component:layout>
			
			<s:Form>
				<s:FormItem label="{Message.get('samplingDesignImport.sourceFile')}">
					<s:layout>
						<s:HorizontalLayout />
					</s:layout>
					<s:TextInput id="sourceFileTextInput"
								 editable="false"
								 />
					<s:Button id="browseButton"
							  label="{Message.get('global.browse')}"
							  buttonMode="true"
							  useHandCursor="true"
							  />
				</s:FormItem>
				<s:FormItem label="{Message.get('samplingDesignImport.srs')}">
					<s:DropDownList id="srsDropDown"
									labelFunction="srsLabelFunction"
									dataProvider="{spatialReferenceSystems}" />	
				</s:FormItem>
			</s:Form>
			
			<s:Button id="uploadButton"
					  label="{Message.get('global.upload')}"
					  buttonMode="true"
					  useHandCursor="true"
					  />
		</component:PopUp>
	</fx:Declarations>
	
</view:AbstractReferenceDataImportView>
