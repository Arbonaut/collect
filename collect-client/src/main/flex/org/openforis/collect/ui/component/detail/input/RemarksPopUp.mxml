<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  creationComplete="creationCompleteHandler(event)" xmlns:component="org.fao.openforis.flex.component.*"
		  creationPolicy="all"
		  alpha="1"
		  >
	<fx:Metadata> 
		[Event(name="save", type="org.openforis.collect.event.input.RemarksPopUpEvent")] 
		[Event(name="cancel", type="org.openforis.collect.event.input.RemarksPopUpEvent")] 
	</fx:Metadata> 
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.events.FlexMouseEvent;
			
			import org.openforis.collect.i18n.Message;
			import org.openforis.collect.idm.model.impl.AbstractValue;
			import org.openforis.collect.idm.model.impl.AbstractValue$Symbol;
			
			[Bindable]
			private var _showReasonBlank:Boolean = true;
			[Bindable]
			private var _abstractValue:AbstractValue;
			
			protected function creationCompleteHandler(event:FlexEvent):void {
			}
			
			public function reset():void {
				//lastSelectedRadioButton = null;
				//_fieldExtraInfo = null;
			}
			/*
			protected function mouseDownOutsideHandler(event:FlexMouseEvent):void {
				save();
			}
			*/
			public function updateCurrentState():void {
				this.currentState = calculateCurrentState();
			}
			
			//getters and setters
			
			public function get showReasonBlank():Boolean {
				return _showReasonBlank;
			}
			
			public function set showReasonBlank(value:Boolean):void {
				_showReasonBlank = value;
				updateCurrentState();
			}
			
			
			protected function remarksTextAreaKeyDownHandler(event:KeyboardEvent):void {
				switch(event.keyCode) {
					case Keyboard.TAB:
						//save();
						break;
					case Keyboard.ESCAPE:
						close();
						break;
				}
			}
			
			protected function calculateCurrentState():String {
				if(_showReasonBlank) {
					return "canSpecifyReasonBlank";
				} else {
					return "default";
				}
			}
			
			
			
			public function close():void {
				//dispatchEvent(new DialogEvent(DialogEvent.CANCEL));
			}


			
			

		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:RadioButtonGroup id="radioButtonGroup" />
	</fx:Declarations>
	
	<s:states>
		<s:State name="default" />
		<s:State name="canSpecifyReasonBlank" />
	</s:states>
	
	<s:VGroup id="reasonBlankGroup" visible="false" includeInLayout="false" 
			  visible.canSpecifyReasonBlank="true" includeInLayout.canSpecifyReasonBlank="true">
		<s:Label text="Reason left blank:" />
		<s:RadioButton id="blankOnFormRadioButton" value="{AbstractValue$Symbol.BLANK_ON_FORM}" group="{radioButtonGroup}" 
					   label="{Message.get('edit.contextMenu.blankOnForm')}" />
		<s:RadioButton id="dashOnFormRadioButton" value="{AbstractValue$Symbol.DASH_ON_FORM}" group="{radioButtonGroup}" 
					   label="{Message.get('edit.contextMenu.dashOnForm')}" />
		<s:RadioButton id="illegibleRadioButton" value="{AbstractValue$Symbol.ILLEGIBLE}" group="{radioButtonGroup}" 
					   label="{Message.get('edit.contextMenu.illegible')" />
	</s:VGroup>
	
	<s:VGroup id="remarksGroup">
		<s:Label text="Remarks:" />
		<s:TextArea id="remarksTextArea" heightInLines="4" textAlign="left" keyDown="remarksTextAreaKeyDownHandler(event)"
					text="{_abstractValue.remarks}" />	
	</s:VGroup>
	
	<s:HGroup width="100%" horizontalAlign="center">
		<s:Button id="okButton" label="OK" />
	</s:HGroup>
	
</s:SkinnableContainer>
