/**
 * Generated by Gas3 v2.3.0 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (UpdateResponse.as).
 */

package org.openforis.collect.remoting.service {

    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import flash.utils.IExternalizable;
    import org.granite.collections.IMap;
    import org.openforis.collect.Proxy;
    import org.openforis.collect.model.proxy.NodeProxy;
    import org.openforis.collect.model.proxy.ValidationResultsProxy;

    [Bindable]
    public class UpdateResponseBase implements IExternalizable, Proxy {

        private var _createdNode:NodeProxy;
        private var _deletedNodeId:Number;
        private var _errors:Number;
        private var _maxCountValidation:IMap;
        private var _minCountValidation:IMap;
        private var _missing:Number;
        private var _missingErrors:Number;
        private var _missingWarnings:Number;
        private var _nodeId:Number;
        private var _relevant:IMap;
        private var _required:IMap;
        private var _skipped:Number;
        private var _updatedFieldValues:IMap;
        private var _validationResults:ValidationResultsProxy;
        private var _warnings:Number;

        [Bindable(event="unused")]
        public function get createdNode():NodeProxy {
            return _createdNode;
        }

        public function set deletedNodeId(value:Number):void {
            _deletedNodeId = value;
        }
        public function get deletedNodeId():Number {
            return _deletedNodeId;
        }

        public function set errors(value:Number):void {
            _errors = value;
        }
        public function get errors():Number {
            return _errors;
        }

        [Bindable(event="unused")]
        public function get maxCountValidation():IMap {
            return _maxCountValidation;
        }

        [Bindable(event="unused")]
        public function get minCountValidation():IMap {
            return _minCountValidation;
        }

        public function set missing(value:Number):void {
            _missing = value;
        }
        public function get missing():Number {
            return _missing;
        }

        public function set missingErrors(value:Number):void {
            _missingErrors = value;
        }
        public function get missingErrors():Number {
            return _missingErrors;
        }

        public function set missingWarnings(value:Number):void {
            _missingWarnings = value;
        }
        public function get missingWarnings():Number {
            return _missingWarnings;
        }

        [Bindable(event="unused")]
        public function get nodeId():Number {
            return _nodeId;
        }

        [Bindable(event="unused")]
        public function get relevant():IMap {
            return _relevant;
        }

        [Bindable(event="unused")]
        public function get required():IMap {
            return _required;
        }

        public function set skipped(value:Number):void {
            _skipped = value;
        }
        public function get skipped():Number {
            return _skipped;
        }

        public function set updatedFieldValues(value:IMap):void {
            _updatedFieldValues = value;
        }
        public function get updatedFieldValues():IMap {
            return _updatedFieldValues;
        }

        [Bindable(event="unused")]
        public function get validationResults():ValidationResultsProxy {
            return _validationResults;
        }

        public function set warnings(value:Number):void {
            _warnings = value;
        }
        public function get warnings():Number {
            return _warnings;
        }

        public function readExternal(input:IDataInput):void {
            _createdNode = input.readObject() as NodeProxy;
            _deletedNodeId = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            _errors = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            _maxCountValidation = input.readObject() as IMap;
            _minCountValidation = input.readObject() as IMap;
            _missing = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            _missingErrors = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            _missingWarnings = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            _nodeId = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            _relevant = input.readObject() as IMap;
            _required = input.readObject() as IMap;
            _skipped = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            _updatedFieldValues = input.readObject() as IMap;
            _validationResults = input.readObject() as ValidationResultsProxy;
            _warnings = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
        }

        public function writeExternal(output:IDataOutput):void {
            output.writeObject(_createdNode);
            output.writeObject(_deletedNodeId);
            output.writeObject(_errors);
            output.writeObject(_maxCountValidation);
            output.writeObject(_minCountValidation);
            output.writeObject(_missing);
            output.writeObject(_missingErrors);
            output.writeObject(_missingWarnings);
            output.writeObject(_nodeId);
            output.writeObject(_relevant);
            output.writeObject(_required);
            output.writeObject(_skipped);
            output.writeObject(_updatedFieldValues);
            output.writeObject(_validationResults);
            output.writeObject(_warnings);
        }
    }
}