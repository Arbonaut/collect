<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:component="org.openforis.collect.ui.component.*"
		 xmlns:input="org.openforis.collect.ui.component.input.*" 
		 width="100%" height="100%" xmlns:container="org.openforis.collect.ui.container.*" 
		 >
	<s:layout>
		<s:VerticalLayout horizontalAlign="center"/>
	</s:layout>
	
	<s:states>
		<s:State name="loading" />
		<s:State name="default" />
		<s:State name="new" basedOn="default" />
		<s:State name="selected" basedOn="default" />
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import org.granite.validation.constraints.Pattern;
			import org.openforis.collect.i18n.Message;
			
			public static const STATE_LOADING:String = "loading";
			public static const STATE_DEFAULT:String = "default";
			public static const STATE_NEW:String = "new";
			public static const STATE_SELECTED:String = "selected";
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Define the validators. -->
		<mx:StringValidator id="fNameV" 
							required="true"
							source="{nameTextInput}" 
							property="text"/>
		<mx:RegExpValidator id="fPasswordV"
							required="true"
							required.selected="false"
							expression="\w\{5,\}"
							noMatchError="{Message.get('usersManagement.error.invalidPassword')}"
							source="{passwordTextInput}" 
							property="text"/>
		<mx:RegExpValidator id="fRepeatedPasswordV"
							required="true"
							required.selected="false"
							expression="[{passwordTextInput.text}]"
							noMatchError="{Message.get('usersManagement.error.repeatPassword')}"
							source="{repeatPasswordTextInput}" 
							property="text"/>
		
	</fx:Declarations>
	
	<component:LoadingContent height="100%" width="100%" 
							  includeIn="loading" />
	
	<s:DataGrid id="dataGrid" height="200"
				includeIn="default, new, selected"
				itemCreationPolicy="immediate"
				>
		<s:columns>
			<s:ArrayList>
				<s:GridColumn headerText="{Message.get('usersManagement.name')}"
							  dataField="name"
							  width="200"
							  />
				<s:GridColumn headerText="{Message.get('usersManagement.roles')}"
							  dataField="roles"
							  width="200"
							  />
				<s:GridColumn headerText="{Message.get('usersManagement.enabled')}"
							  dataField="enabled"
							  width="50" 
							  itemRenderer="org.openforis.collect.ui.component.datagrid.BooleanColumnItemRenderer"
							  />
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	
	<s:Button id="newUserButton" 
			  excludeFrom="loading"
			  itemCreationPolicy="immediate"
			  label="{Message.get('usersManagement.addNewUser')}"
			  useHandCursor="true" buttonMode="true" />
	
	<s:VGroup includeIn="new, selected"
			  itemCreationPolicy="immediate"
			  horizontalAlign="center"
			  >
		
		<container:FieldSet id="userDetailsBox" 
							legend="{Message.get('usersManagement.userDetails')}" 
							creationPolicy="all">
			<container:layout>
				<s:VerticalLayout horizontalAlign="center" paddingBottom="10" />
			</container:layout>
			<s:Form id="detailForm">
				<s:layout>
					<s:FormLayout gap="-14" />
				</s:layout>
				<s:FormItem label="{Message.get('usersManagement.enabled')}">
					<s:CheckBox id="enabledCheckBox" />
				</s:FormItem>
				<s:FormItem label="{Message.get('usersManagement.name')}">
					<input:TextInput id="nameTextInput" restrictPattern="^\w*$" upperCase="false" />
				</s:FormItem>
				<s:FormItem label="{Message.get('usersManagement.password')}">
					<s:TextInput id="passwordTextInput" displayAsPassword="true" />
				</s:FormItem>
				<s:FormItem label="{Message.get('usersManagement.repeatPassword')}">
					<s:TextInput id="repeatPasswordTextInput" displayAsPassword="true" />
				</s:FormItem>
				<s:FormItem label="{Message.get('usersManagement.roles')}">
					<s:CheckBox id="roleEntryCheckBox"
								label="{Message.get('roles.entry')}" />
					<s:CheckBox id="roleCleansingCheckBox" 
								label="{Message.get('roles.cleansing')}" />
					<s:CheckBox id="roleAnalysisCheckBox"
								label="{Message.get('roles.analysis')}" />
					<s:CheckBox id="roleAdminCheckBox"
								label="{Message.get('roles.admin')}" />
				</s:FormItem>
			</s:Form>
			<s:HGroup gap="30">
				<s:Button id="saveButton" 
						  label="{Message.get('global.save')}"
						  useHandCursor="true" buttonMode="true"
						  />
				<s:Button id="deleteButton"
						  includeIn="selected" 
						  itemCreationPolicy="immediate"
						  label="{Message.get('global.delete')}"
						  useHandCursor="true" buttonMode="true"
						  />
			</s:HGroup>
		</container:FieldSet>
	</s:VGroup>
	
</s:BorderContainer>
