<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx" 
					width="100%" height="100%"
					
					creationPolicy="all"
					label="{entityDefinition.getLabelText()}">
	
	<s:layout>
		<s:VerticalLayout gap="15" />
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.IList;
			import mx.collections.ListCollectionView;
			import mx.core.IVisualElement;
			
			import org.openforis.collect.i18n.Message;
			import org.openforis.collect.metamodel.proxy.AttributeDefinitionProxy;
			import org.openforis.collect.metamodel.proxy.EntityDefinitionProxy;
			import org.openforis.collect.model.UITab;
			import org.openforis.collect.model.proxy.AttributeProxy;
			import org.openforis.collect.model.proxy.CodeProxy;
			import org.openforis.collect.model.proxy.CoordinateProxy;
			import org.openforis.collect.model.proxy.EntityProxy;
			import org.openforis.collect.util.StringUtil;
			
			import spark.components.FormItem;
			import spark.events.IndexChangeEvent;
		
			private var _parentEntity:EntityProxy;
			private var _entity:EntityProxy;
			private var _entityDefinition:EntityDefinitionProxy;
			private var _uiTabs:ListCollectionView;	
			private var _forms:Array = new Array();
			
			[Bindable]
			private var dropDownDataProvider:IList;
			
			[Bindable]
			public function get parentEntity():EntityProxy {
				return _parentEntity;
			}

			public function set parentEntity(value:EntityProxy):void {
				_parentEntity = value;
				
				if(_parentEntity != null && _entityDefinition != null) {
					var children:IList = _parentEntity.getChildren(_entityDefinition.name);
					if(_entityDefinition.multiple) {
						dropDownDataProvider = children;
					}
				}
			}
			
			[Bindable]
			public function get entity():EntityProxy {
				return _entity;
			}
			
			public function set entity(value:EntityProxy):void {
				_entity = value;
			}
			
			override protected function createChildren():void {
				super.createChildren();
				addElement(externalContainer);
				externalContainer.addElement(internalContainer);
				
				if(entityDefinition.multiple) {
					externalContainer.addElementAt(addSection, 0);
					internalContainer.visible = false;
				} else {
					internalContainer.visible = true;
				}
				
				if(uiTabs == null) {
					internalContainer.addElement(scroller);
				} else {
					internalContainer.addElement(scrollableForms);
				}
			}
			
			public function addItem(collectFormItem:CollectFormItem):void {
				collectFormItem.addTo(form);
			}
			
			public function addFormItem(formItem:IVisualElement, tabName:String = null):void {
				if(tabName == null || tabName == ''){
					form.addElement(formItem);
				} else {
					var f:ScrollableFormContainer = (_forms[tabName] as ScrollableFormContainer);
					f.addToForm(formItem);
				}
			}
			
			 public function addAttributeFormItem(attributeFormItem:AttributeFormItem, tabName:String = null):void {
				if(tabName == null || tabName == ''){
					attributeFormItem.addTo(form);
				} else {
					var f:ScrollableFormContainer = (_forms[tabName] as ScrollableFormContainer);
					attributeFormItem.addTo(f.form);
				}
			} 
			
			public function addEntityFormItem(entityFormItem:EntityFormItem, tabName:String = null):void {
				var formItem:FormItem = new FormItem();
				formItem.label = entityFormItem.entityDefinition.getLabelText();
				
				if(tabName == null || tabName == '') {
					form.addElement(formItem);
					form.addElement(entityFormItem);
				} else {
					var f:ScrollableFormContainer = (_forms[tabName] as ScrollableFormContainer);
					f.addToForm(formItem);
					f.addToForm(entityFormItem);
				}
			}
			
			protected function addRecordButtonClickHandler(event:MouseEvent):void {
				
			}

			[Bindable]
			public function get entityDefinition():EntityDefinitionProxy {
				return _entityDefinition;
			}

			public function set entityDefinition(value:EntityDefinitionProxy):void {
				_entityDefinition = value;
			}

			[Bindable]
			public function get uiTabs():ListCollectionView {
				return _uiTabs;
			}

			public function set uiTabs(value:ListCollectionView):void {
				_uiTabs = value;
				for each (var tab:UITab in uiTabs) {
					var f:ScrollableFormContainer = new ScrollableFormContainer();
					f.entityDefinition = this.entityDefinition;
					f.label = tab.label;
					_forms[tab.name] = f;
					f.initialize();
					viewStack.addElement(f);
				}
			}

			private function dropDownLabelFunction(item:Object):String {
				if(item is EntityProxy) {
					var entity:EntityProxy = EntityProxy(item);
					var keyDefs:IList = _entityDefinition.keyAttributeDefinitions;
					var keyParts:Array = new Array();
					for each (var def:AttributeDefinitionProxy in keyDefs) {
						var key:AttributeProxy = entity.getSingleAttribute(def.name);
						if(key != null) {
							var keyValue:Object = key.value;
							var keyPart:String = null;
							if(keyValue is CodeProxy) {
								keyPart = CodeProxy(keyValue).toString();
							} else if(keyValue is CoordinateProxy) {
								//todo
								keyPart = CoordinateProxy(keyValue).toString();
							} else {
								keyPart = String(keyValue);
							}
							keyParts.push(keyPart);
						}
					}
					return StringUtil.concat(" - ", keyParts);
				} else {
					return "";
				}
			}
												   

			protected function dropDownListChangeHandler(event:IndexChangeEvent):void {
				entity = dropDownList.selectedItem as EntityProxy;
				if(internalContainer.visible) {
					//internal container already visible, call programmatically the showEffect
					showFormEffect.play([internalContainer]);
					
					//todo reset entity form scrollers, set first tab
				} else {
					internalContainer.visible = true;
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
		<s:Fade id="showFormEffect" 
				duration="600" 
				alphaFrom="0" 
				alphaTo="1"
				/>
		
		<s:Fade id="hideFormEffect" 
				duration="400" 
				alphaFrom="1" 
				alphaTo="0"
				/>
		
		<s:BorderContainer width="100%" height="100%" id="externalContainer" styleName="entityForm">
			<s:layout>
				<s:VerticalLayout/>
			</s:layout>
		</s:BorderContainer>
		
		<s:Group width="100%" id="addSection">
			<s:layout>
				<s:HorizontalLayout paddingTop="5" horizontalAlign="left" paddingLeft="10" gap="12" verticalAlign="middle" />
			</s:layout>
			<s:Label text="{entityDefinition.getLabelText()}" styleName="bold" />
			<s:DropDownList prompt="{Message.get('global.dropDownPrompt')}" width="150" id="dropDownList" dataProvider="{dropDownDataProvider}" labelFunction="dropDownLabelFunction"
							change="dropDownListChangeHandler(event)"/>
			<s:Button styleName="addButton" buttonMode="true" useHandCursor="true" />
			<s:Button styleName="deleteButton" buttonMode="true" useHandCursor="true" />
		</s:Group>
		
		<s:Group id="internalContainer" height="100%" width="100%" showEffect="{showFormEffect}" hideEffect="{hideFormEffect}" />
		
		<s:Scroller height="100%" width="100%" id="scroller">
			<s:Group width="100%" id="group">
				<s:Form height="100%" width="100%" id="form">
					<s:layout>
						<s:FormLayout gap="-15" paddingLeft="0" paddingRight="10" />
					</s:layout>
				</s:Form>
			</s:Group>
		</s:Scroller>
		
		<s:VGroup id="scrollableForms" width="100%" height="100%" gap="0">
			<s:ButtonBar id="buttonBar"  dataProvider="{viewStack}" />
			<mx:ViewStack id="viewStack" width="100%" height="100%" verticalGap="0" />
		</s:VGroup>
			
	</fx:Declarations>
	
</s:NavigatorContent>
