<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx" 
					xmlns:detail="org.openforis.collect.ui.component.detail.*"
					width="100%" height="100%"
					creationComplete="creationCompleteHandler(event)"
					creationPolicy="all"
					label="{entityDefinition.getLabelText()}" 
					>
	
	<s:layout>
		<s:VerticalLayout gap="15" />
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.collections.ListCollectionView;
			import mx.containers.GridItem;
			import mx.containers.GridRow;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			
			import org.openforis.collect.i18n.Message;
			import org.openforis.collect.metamodel.proxy.AttributeDefinitionProxy;
			import org.openforis.collect.metamodel.proxy.EntityDefinitionProxy;
			import org.openforis.collect.metamodel.proxy.ModelVersionProxy;
			import org.openforis.collect.metamodel.proxy.NodeDefinitionProxy;
			import org.openforis.collect.model.UITab;
			import org.openforis.collect.model.proxy.AttributeProxy;
			import org.openforis.collect.model.proxy.CodeProxy;
			import org.openforis.collect.model.proxy.CoordinateProxy;
			import org.openforis.collect.model.proxy.EntityProxy;
			import org.openforis.collect.presenter.EntityFormPresenter;
			import org.openforis.collect.ui.UIBuilder;
			import org.openforis.collect.util.CollectionUtil;
			import org.openforis.collect.util.StringUtil;
			
			import spark.components.FormItem;
			
			private const MAIN_TAB:Object = new Object();
		
			private var _parentEntity:EntityProxy;
			private var _entity:EntityProxy;
			private var _entityDefinition:EntityDefinitionProxy;
			private var _modelVersion:ModelVersionProxy;
			private var _uiTabs:ListCollectionView;	
			private var _forms:Array = new Array();
			private var _definitionsPerTab:IList;
			
			private var _presenter:EntityFormPresenter;
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				_presenter = new EntityFormPresenter(this);
			}
			
			[Bindable]
			public function get parentEntity():EntityProxy {
				return _parentEntity;
			}

			public function set parentEntity(value:EntityProxy):void {
				_parentEntity = value;
			}
			
			[Bindable]
			public function get entity():EntityProxy {
				return _entity;
			}
			
			public function set entity(value:EntityProxy):void {
				_entity = value;
			}
			
			[Bindable]
			public function get definitionsPerTab():IList {
				return _definitionsPerTab;
			}
			
			public function set definitionsPerTab(value:IList):void {
				_definitionsPerTab = value;
			}
			
			public function build():void {
				var map:Dictionary = new Dictionary();
				var childDefns:IList = UIBuilder.getDefinitionsInVersion(entityDefinition.childDefinitions, modelVersion);
				for each (var defn:NodeDefinitionProxy in childDefns) {
					addDefinition(map, defn);
				}
				var temp:IList = new ArrayCollection();
				var mainDefs:IList = map[MAIN_TAB];
				temp.addItem(mainDefs);
				for each (var tab:UITab in uiTabs) {
					var defs:IList = map[tab];
					temp.addItem(defs);
				}
				this.definitionsPerTab = temp;
			}
			
			private function addDefinition(map:Dictionary, def:NodeDefinitionProxy):void {
				var tabName:String = def.uiTabName;
				var tab:Object;
				if(StringUtil.isBlank(tabName)) {
					tab = MAIN_TAB;
				} else {
					tab = CollectionUtil.getItem(uiTabs, "name", tabName);
				}
				var nodeDefs:IList = map[tab];
				if(nodeDefs == null) {
					nodeDefs = new ArrayCollection();
					map[tab] = nodeDefs;
				}
				nodeDefs.addItem(def);
			}
			
			override protected function createChildren():void {
				super.createChildren();
				addElement(externalContainer);
				externalContainer.addElement(internalContainer);
				
				if(entityDefinition.multiple) {
					externalContainer.addElementAt(addSection, 0);
					internalContainer.visible = false;
				} else {
					internalContainer.visible = true;
				}
				
				if(uiTabs == null) {
					internalContainer.addElement(scroller);
				} else {
					internalContainer.addElement(scrollableForms);
				}
			}

			[Bindable]
			public function get entityDefinition():EntityDefinitionProxy {
				return _entityDefinition;
			}

			public function set entityDefinition(value:EntityDefinitionProxy):void {
				_entityDefinition = value;
			}

			[Bindable]
			public function get modelVersion():ModelVersionProxy {
				return _modelVersion;
			}
			
			public function set modelVersion(value:ModelVersionProxy):void {
				_modelVersion = value;
			}

			[Bindable]
			public function get uiTabs():ListCollectionView {
				return _uiTabs;
			}

			public function set uiTabs(value:ListCollectionView):void {
				_uiTabs = value;
			}

			private function dropDownLabelFunction(item:Object):String {
				if(item is EntityProxy) {
					var entity:EntityProxy = EntityProxy(item);
					var keyDefs:IList = _entityDefinition.keyAttributeDefinitions;
					var keyParts:Array = new Array();
					for each (var def:AttributeDefinitionProxy in keyDefs) {
						var key:AttributeProxy = entity.getSingleAttribute(def.name);
						if(key != null && key.value != null) {
							var keyValue:Object = key.value;
							var keyPart:String = null;
							if(keyValue is CodeProxy) {
								keyPart = CodeProxy(keyValue).toString();
							} else if(keyValue is CoordinateProxy) {
								//todo
								keyPart = CoordinateProxy(keyValue).toString();
							} else {
								keyPart = String(keyValue);
							}
							keyParts.push(keyPart);
						}
					}
					return StringUtil.concat(" - ", keyParts);
				} else {
					return "";
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
		<s:Fade id="showFormEffect" 
				duration="600" 
				alphaFrom="0" 
				alphaTo="1"
				/>
		
		<s:Fade id="hideFormEffect" 
				duration="400" 
				alphaFrom="1" 
				alphaTo="0"
				/>
		
		<s:BorderContainer width="100%" height="100%" id="externalContainer" styleName="entityForm">
			<s:layout>
				<s:VerticalLayout/>
			</s:layout>
		</s:BorderContainer>
		
		<s:Group width="100%" id="addSection">
			<s:layout>
				<s:HorizontalLayout paddingTop="5" horizontalAlign="left" paddingLeft="10" gap="12" verticalAlign="middle" />
			</s:layout>
			<s:Label text="{entityDefinition.getLabelText()}" styleName="bold" />
			<s:DropDownList prompt="{Message.get('global.dropDownPrompt')}" width="150" id="dropDownList" labelFunction="dropDownLabelFunction" />
			<s:Button id="addButton" styleName="addButton" buttonMode="true" useHandCursor="true" />
			<s:Button id="deleteButton" styleName="deleteButton" buttonMode="true" useHandCursor="true" />
		</s:Group>
		
		<s:Group id="internalContainer" height="100%" width="100%" showEffect="{showFormEffect}" hideEffect="{hideFormEffect}" />
		
		<s:Scroller height="100%" width="100%" id="scroller">
			<s:Group width="100%" id="group">
				<s:DataGroup id="dataGroup" 
							 dataProvider="{definitionsPerTab.getItemAt(0) as IList}" 
							 height="100%" 
							 width="100%" 
							 >
					<s:layout>
						<s:VerticalLayout />
					</s:layout>
					<s:itemRenderer>
						<fx:Component>
							<detail:FormDataGroupItemRenderer
								isInDataGroup="false"
								entity="{outerDocument.entity}"
								modelVersion="{outerDocument.modelVersion}"
								/>
						</fx:Component>
					</s:itemRenderer>
				</s:DataGroup>
			</s:Group>
		</s:Scroller>
		
		<s:VGroup id="scrollableForms" width="100%" height="100%" gap="0">
			<s:ButtonBar id="buttonBar" dataProvider="{viewStack}" />
			<mx:ViewStack id="viewStack" width="100%" height="100%" verticalGap="0">
				<mx:Repeater id="tabsRP" dataProvider="{uiTabs}">
					<detail:ScrollableFormContainer 
						entityDefinition="{entityDefinition}"
						nodeDefinitions="{definitionsPerTab.getItemAt(tabsRP.currentIndex + 1) as IList}"
						modelVersion="{modelVersion}"
						label="{tabsRP.currentItem.label}"
						entity="{entity}"
					/>
				</mx:Repeater>
			</mx:ViewStack>
		</s:VGroup>
			
	</fx:Declarations>
	
</s:NavigatorContent>
