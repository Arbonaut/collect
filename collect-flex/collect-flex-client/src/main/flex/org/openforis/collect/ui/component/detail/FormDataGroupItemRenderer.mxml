<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				dataChange="dataChangeHandler(event)" 
				autoDrawBackground="false"
				>
	
	<fx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.controls.Spacer;
			import mx.events.FlexEvent;
			
			import org.openforis.collect.metamodel.proxy.AttributeDefinitionProxy;
			import org.openforis.collect.metamodel.proxy.CoordinateAttributeDefinitionProxy;
			import org.openforis.collect.metamodel.proxy.EntityDefinitionProxy;
			import org.openforis.collect.metamodel.proxy.ModelVersionProxy;
			import org.openforis.collect.metamodel.proxy.TaxonAttributeDefinitionProxy;
			import org.openforis.collect.model.proxy.EntityProxy;
			import org.openforis.collect.ui.UIBuilder;
			
			import spark.components.HGroup;
			import spark.components.Label;
			import spark.components.VGroup;
			
			private var _entity:EntityProxy;
			private var _modelVersion:ModelVersionProxy;
			private var _isInDataGroup:Boolean = false;
			private var _labelWidth:Number = 150;
			
			override protected function createChildren():void {
				super.createChildren();
				if(data != null) {
					var formItem:CollectFormItem;
					if(data is AttributeDefinitionProxy) {
						formItem = UIBuilder.getAttributeFormItem(AttributeDefinitionProxy(data), isInDataGroup);
						if(isInDataGroup) {
							addElement(formItem);
						} else {
							var label:Label = new Label();
							label.styleName = "bold";
							label.width = labelWidth;
							label.text = data.getLabelText();
							
							if(data is CoordinateAttributeDefinitionProxy || data is TaxonAttributeDefinitionProxy) {
								var vGroup:VGroup = new VGroup();
								vGroup.addElement(label);
								var internalGroup:HGroup = new HGroup();
								internalGroup.gap = 0;
								var spacer:Spacer = new Spacer();
								spacer.width = 20;
								internalGroup.addElement(spacer);
								internalGroup.addElement(formItem);
								vGroup.addElement(internalGroup);
								addElement(vGroup);
							} else {
								var hGroup:HGroup = new HGroup();
								hGroup.gap = 0;
								hGroup.addElement(label);
								hGroup.addElement(formItem);
								addElement(hGroup);
							}
						}
					} else if(data is EntityDefinitionProxy) {
						formItem = UIBuilder.getEntityFormItem(EntityDefinitionProxy(data));
						addElement(formItem);
						BindingUtils.bindProperty(formItem, "modelVersion", this, "modelVersion");
					}
					BindingUtils.bindProperty(formItem, "parentEntity", this, "entity");
				}
			}
			
			protected function dataChangeHandler(event:FlexEvent):void {
				removeAllElements();
				initialized = false;
				initialize();
			}
			
			[Bindable]
			public function get isInDataGroup():Boolean {
				return _isInDataGroup;
			}
			
			public function set isInDataGroup(value:Boolean):void {
				_isInDataGroup = value;
			}
			
			[Bindable]
			public function get entity():EntityProxy {
				return _entity;
			}
			
			public function set entity(value:EntityProxy):void {
				_entity = value;
			}
			
			[Bindable]
			public function get modelVersion():ModelVersionProxy {
				return _modelVersion;
			}
			
			public function set modelVersion(value:ModelVersionProxy):void {
				_modelVersion = value;
			}
			
			[Bindable]
			public function get labelWidth():Number {
				return _labelWidth;
			}
			
			public function set labelWidth(value:Number):void {
				_labelWidth = value;
			}
		]]>
	</fx:Script>
</s:ItemRenderer>
