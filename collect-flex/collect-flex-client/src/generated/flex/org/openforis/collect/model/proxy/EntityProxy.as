/**
 * Generated by Gas3 v2.2.0 (Granite Data Services).
 *
 * NOTE: this file is only generated if it does not exist. You may safely put
 * your custom code here.
 */

package org.openforis.collect.model.proxy {
	import mx.collections.ArrayCollection;
	import mx.collections.ArrayList;
	import mx.collections.IList;
	
	import org.openforis.collect.metamodel.proxy.AttributeDefinitionProxy;
	import org.openforis.collect.metamodel.proxy.EntityDefinitionProxy;
	import org.openforis.collect.util.CollectionUtil;
	import org.openforis.collect.util.StringUtil;

    [Bindable]
    [RemoteClass(alias="org.openforis.collect.model.proxy.EntityProxy")]
    public class EntityProxy extends EntityProxyBase {
    	public var children:Object;
		
		public function getSingleAttribute(attributeName:String):AttributeProxy {
			var attributes:IList = childrenByName.get(attributeName);
			if(attributes != null) {
				if(attributes.length == 1) {
					var attribute:AttributeProxy = attributes.getItemAt(0) as AttributeProxy;
					return attribute;
				} else if (attributes.length > 1) {
					throw new Error("Single attribute expected");
				}
			}
			return null;
		}
		
		public function getChildren(nodeName:String = null):IList {
			var children:IList; 
			if(name == null) {
				children = new ArrayList();
				var values:ArrayCollection = childrenByName.values;
				for each (var childList:IList in values) {
					CollectionUtil.addAll(children, childList);
				}
			} else {
				children = childrenByName.get(nodeName);
			}
			return children;
		}

		public function getChild(nodeName:String, index:int):NodeProxy {
			var children:IList = getChildren(nodeName);
			if(children != null && children.length > index) {
				return children.getItemAt(index) as NodeProxy;
			} else {
				return null;
			}
		}
		
		public function getChildById(id:int):NodeProxy {
			var values:ArrayCollection = childrenByName.values;
			for each (var childList:IList in values) {
				for each (var child:NodeProxy in childList) {
					if(child.id == id) {
						return child;
					}
				}
			}
			return null;
		}
		
		public function getNode(id:int):NodeProxy {
			var child:NodeProxy = getChildById(id);
			if(child != null) {
				return child;
			} else {
				//search in child entities
				var entities:IList = getChildEntities();
				for each (var e:EntityProxy in entities) {
					child = e.getNode(id);
					if(child != null) {
						return child;
					}
				}
			}
			return null;
		}
		
		public function getChildEntities():IList {
			var entities:IList = new ArrayCollection();
			var values:IList = childrenByName.values;
			for each (var childList:IList in values) {
				for each (var child:NodeProxy in childList) {
					if(child is EntityProxy) {
						entities.addItem(child);
					}
				}
			}
			return entities;
		}
		
		public function addChild(node:NodeProxy):void {
			var name:String = node.name;
			var children:IList = childrenByName.get(name);
			if(children == null) {
				children = new ArrayList();
				childrenByName.put(name, children);
			}
			children.addItem(node);
		}
		
		public function removeChild(node:NodeProxy):void {
			var name:String = node.name;
			var children:IList = childrenByName.get(name);
			var index:int = children.getItemIndex(node);
			if(index >= 0) {
				children.removeItemAt(index);
			}
		}
		
		public function getKeyLabel(entityDefinition:EntityDefinitionProxy):String {
			var keyDefs:IList = entityDefinition.keyAttributeDefinitions;
			var keyParts:Array = new Array();
			for each (var def:AttributeDefinitionProxy in keyDefs) {
				var key:AttributeProxy = getSingleAttribute(def.name);
				if(key != null && key.value != null) {
					var keyValue:Object = key.value;
					var keyPart:String = null;
					if(keyValue is CodeProxy) {
						keyPart = CodeProxy(keyValue).toString();
					} else if(keyValue is CoordinateProxy) {
						//todo
						keyPart = CoordinateProxy(keyValue).toString();
					} else {
						keyPart = String(keyValue);
					}
					keyParts.push(keyPart);
				}
			}
			return StringUtil.concat(" - ", keyParts);
		}
    }
}