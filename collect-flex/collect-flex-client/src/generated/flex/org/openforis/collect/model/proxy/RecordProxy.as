/**
 * Generated by Gas3 v2.2.0 (Granite Data Services).
 *
 * NOTE: this file is only generated if it does not exist. You may safely put
 * your custom code here.
 */

package org.openforis.collect.model.proxy {
	import org.openforis.collect.remoting.service.UpdateResponse;

    [Bindable]
    [RemoteClass(alias="org.openforis.collect.model.proxy.RecordProxy")]
    public class RecordProxy extends RecordProxyBase {
		
		public function getNode(id:int):NodeProxy {
			if(id == rootEntity.id) {
				return rootEntity;
			} else {
				return rootEntity.getNode(id);
			}
		}
		
		public function update(response:UpdateResponse):void {
			var node:NodeProxy, oldNode:NodeProxy, parent:EntityProxy;
			//remove nodes
			/*for each (var id:int in response.deletedNodeIds) {
				oldNode = getNode(id);
				if(oldNode != null) {
					parent = EntityProxy(getNode(oldNode.parentId));
					if(parent != null) {
						oldNode = parent.getChildById(id);
						parent.removeChild(oldNode);
					}
				}
			}*/
			//add new nodes
			/*for each (node in response.addedNodes) {
				parent = EntityProxy(getNode(node.parentId));
				parent.addChild(node);
			}*/
			
			//replace updated nodes
			/*for each (node in response.updatedNodes) {
				oldNode = getNode(node.id);
				parent = EntityProxy(getNode(oldNode.parentId));
				parent.replaceChild(oldNode, node);
			}*/
			
			//update node state
			/*
			for each (var state:NodeStateProxy in response.states) {
				node = getNode(state.nodeId);
				node.state = state;
			}
			*/
		}
    }
}