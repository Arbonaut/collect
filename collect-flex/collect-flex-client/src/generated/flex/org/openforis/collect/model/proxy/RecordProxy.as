/**
 * Generated by Gas3 v2.2.0 (Granite Data Services).
 *
 * NOTE: this file is only generated if it does not exist. You may safely put
 * your custom code here.
 */

package org.openforis.collect.model.proxy {
	import flash.utils.Dictionary;
	
	import mx.collections.ArrayCollection;
	import mx.collections.IList;
	
	import org.openforis.collect.client.UpdateRequestToken;
	import org.openforis.collect.event.ApplicationEvent;
	import org.openforis.collect.event.EventDispatcherFactory;
	import org.openforis.collect.remoting.service.UpdateResponse;

    [Bindable]
    [RemoteClass(alias="org.openforis.collect.model.proxy.RecordProxy")]
    public class RecordProxy extends RecordProxyBase {
		
		private var _nodesMap:Dictionary;
		private var _updated:Boolean = false;
		
		private var validationResults:ValidationResultsProxy;

		public function RecordProxy():void {
			super();
		}
		
		public function init():void {
			_nodesMap = new Dictionary();
			traverse(initNode);
		}
		
		/**
		 * Traverse all the record's nodes and execute the argument function passing
		 * the visited node to it
		 * */
		public function traverse(fun:Function):void {
			if(rootEntity != null) {
				fun(rootEntity);
				rootEntity.traverse(fun);
			}
		}
		
		protected function initNode(node:NodeProxy):void {
			_nodesMap[node.id] = node;
			node.init();
		}
		
		public function getNode(id:int):NodeProxy {
			return _nodesMap[id];
		}
		
		public function update(responses:IList, token:UpdateRequestToken = null):void {
			var field:FieldProxy;
			if(token != null && token is UpdateRequestToken) {
				switch(UpdateRequestToken(token).type) {
					case UpdateRequestToken.UPDATE_VALUE:
						//do not break, apply symbol to field
					case UpdateRequestToken.UPDATE_SYMBOL:
						for each (field in token.updatedFields) {
							field.symbol = token.symbol;
						}
						break;
					case UpdateRequestToken.UPDATE_REMARKS:
						for each (field in token.updatedFields) {
							field.remarks = token.remarks;
						}
						break;
				}
			}
			
			for each (var response:UpdateResponse in responses)	{
				processResponse(response);
			}
			_updated = true;
			
			var appEvt:ApplicationEvent = new ApplicationEvent(ApplicationEvent.UPDATE_RESPONSE_RECEIVED);
			appEvt.result = responses;
			EventDispatcherFactory.getEventDispatcher().dispatchEvent(appEvt);
		}
		
		private function processResponse(response:UpdateResponse):void {
			var node:NodeProxy, oldNode:NodeProxy, parent:EntityProxy;
			if(response.createdNode != null) {
				node = response.createdNode;
				parent = getNode(node.parentId) as EntityProxy;
				parent.addChild(node);
				initNode(node);
				if(node is EntityProxy) {
					EntityProxy(node).traverse(initNode);
				}
			}
			if(response.deletedNodeId > 0) {
				node = getNode(response.deletedNodeId);
				if(node != null) {
					parent = getNode(node.parentId) as EntityProxy;
					parent.removeChild(node);
					_nodesMap[node.id] = null;
				}
			} else {
				node = getNode(response.nodeId);
				if(node is AttributeProxy) {
					var a:AttributeProxy = AttributeProxy(node);
					if(response.validationResults != null) {
						a.validationResults = response.validationResults;
					}
					if(response.updatedFieldValues != null) {
						var fieldIdxs:ArrayCollection = response.updatedFieldValues.keySet;
						for each (var i:int in fieldIdxs) {
							var f:FieldProxy = a.getField(i);
							f.value = response.updatedFieldValues.get(i);
						}
						a.errorConfirmed = false;
						parent = getNode(node.parentId) as EntityProxy;
						parent.updateKeyText();
					}
				} else if(node is EntityProxy) {
					var e:EntityProxy = EntityProxy(node);
					if(response.maxCountValidation != null && response.maxCountValidation.length > 0) {
						e.updateChildrenMaxCountValiditationMap(response.maxCountValidation);
					}
					if(response.minCountValidation != null && response.minCountValidation.length > 0) {
						e.updateChildrenMinCountValiditationMap(response.minCountValidation);
					}
					if(response.relevant != null && response.relevant.length > 0) {
						e.updateChildrenRelevanceMap(response.relevant);
					}
					if(response.required != null && response.required.length > 0) {
						e.updateChildrenRequiredMap(response.required);
					}
				}
			}
		}
		
		public function showErrors():void {
			rootEntity.showErrorsOnDescendants();
		}
		
		public function get updated():Boolean {
			return _updated;
		}
		
		public function set updated(value:Boolean):void {
			 _updated = value;
		}
    }
}