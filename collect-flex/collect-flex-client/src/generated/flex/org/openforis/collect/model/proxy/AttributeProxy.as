/**
 * Generated by Gas3 v2.2.0 (Granite Data Services).
 *
 * NOTE: this file is only generated if it does not exist. You may safely put
 * your custom code here.
 */

package org.openforis.collect.model.proxy {
	import mx.collections.IList;
	
	import org.openforis.collect.i18n.Message;
	import org.openforis.collect.metamodel.proxy.LanguageSpecificTextProxy;
	import org.openforis.collect.util.CollectionUtil;
	import org.openforis.collect.util.StringUtil;

    [Bindable]
    [RemoteClass(alias="org.openforis.collect.model.proxy.AttributeProxy")]
    public class AttributeProxy extends AttributeProxyBase {
		
		private var _visited:Boolean = false;
		
		public function getField(index:int):FieldProxy {
			if(index < 0) {
				index = 0;
			}
			return fields.getItemAt(index) as FieldProxy;
		}

		public function get validationMessage():String {
			var results:IList = null;
			if(hasErrors()) {
				results = validationResults.errors;
			} else if(hasWarnings()) {
				results = validationResults.warnings;
			}
			if(results != null) {
				var parts:Array = new Array();
				for each (var r:ValidationResultProxy in results) {
					var message:String = LanguageSpecificTextProxy.getLocalizedText(r.messages);
					if(StringUtil.isBlank(message)) {
						switch(r.ruleName) {
							case "SpecifiedValidator":
								message = Message.get("edit.validation.specifiedError");
								break;
							default:
								message = r.ruleName;
						}
						parts.push(message);
					}
				}
				if(parts.length > 0) {
					return StringUtil.concat(";\n", parts);
				}
			}
			return null;
		}
		
		public function hasErrors():Boolean {
			return validationResults != null && CollectionUtil.isNotEmpty(validationResults.errors);
		}
		
		public function hasWarnings():Boolean {
			return validationResults != null && CollectionUtil.isNotEmpty(validationResults.warnings);
		}
		
		public function get visited():Boolean {
			return _visited;
		}
		
		public function set visited(value:Boolean):void {
			_visited = value;
		}
    }
}