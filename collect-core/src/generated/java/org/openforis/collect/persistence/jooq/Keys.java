/**
 * This class is generated by jOOQ
 */
package org.openforis.collect.persistence.jooq;

/**
 * This class is generated by jOOQ.
 *
 * A class modelling foreign key relationships between tables of the collect schema
 */
@javax.annotation.Generated(value    = {"http://www.jooq.org", "2.0.1"},
                            comments = "This class is generated by jOOQ")
@SuppressWarnings({"unchecked"})
public class Keys extends org.jooq.impl.AbstractKeys {

	// IDENTITY definitions

	// UNIQUE and PRIMARY KEY definitions
	public static final org.jooq.UniqueKey<org.openforis.collect.persistence.jooq.tables.records.DataRecord> PK_data = createUniqueKey(org.openforis.collect.persistence.jooq.tables.Data.DATA, org.openforis.collect.persistence.jooq.tables.Data.DATA.ID);
	public static final org.jooq.UniqueKey<org.openforis.collect.persistence.jooq.tables.records.LogoRecord> PK_logo = createUniqueKey(org.openforis.collect.persistence.jooq.tables.Logo.LOGO, org.openforis.collect.persistence.jooq.tables.Logo.LOGO.POS);
	public static final org.jooq.UniqueKey<org.openforis.collect.persistence.jooq.tables.records.RecordRecord> PK_record = createUniqueKey(org.openforis.collect.persistence.jooq.tables.Record.RECORD, org.openforis.collect.persistence.jooq.tables.Record.RECORD.ID);
	public static final org.jooq.UniqueKey<org.openforis.collect.persistence.jooq.tables.records.SchemaDefinitionRecord> PK_schema_definition = createUniqueKey(org.openforis.collect.persistence.jooq.tables.SchemaDefinition.SCHEMA_DEFINITION, org.openforis.collect.persistence.jooq.tables.SchemaDefinition.SCHEMA_DEFINITION.ID);
	public static final org.jooq.UniqueKey<org.openforis.collect.persistence.jooq.tables.records.SurveyRecord> PK_survey = createUniqueKey(org.openforis.collect.persistence.jooq.tables.Survey.SURVEY, org.openforis.collect.persistence.jooq.tables.Survey.SURVEY.ID);
	public static final org.jooq.UniqueKey<org.openforis.collect.persistence.jooq.tables.records.SurveyRecord> UK_survey_name = createUniqueKey(org.openforis.collect.persistence.jooq.tables.Survey.SURVEY, org.openforis.collect.persistence.jooq.tables.Survey.SURVEY.NAME);
	public static final org.jooq.UniqueKey<org.openforis.collect.persistence.jooq.tables.records.SurveyRecord> UK_survey_uri = createUniqueKey(org.openforis.collect.persistence.jooq.tables.Survey.SURVEY, org.openforis.collect.persistence.jooq.tables.Survey.SURVEY.URI);
	public static final org.jooq.UniqueKey<org.openforis.collect.persistence.jooq.tables.records.TaxonRecord> PK_taxon = createUniqueKey(org.openforis.collect.persistence.jooq.tables.Taxon.TAXON, org.openforis.collect.persistence.jooq.tables.Taxon.TAXON.ID);
	public static final org.jooq.UniqueKey<org.openforis.collect.persistence.jooq.tables.records.TaxonNameRecord> PK_taxon_name = createUniqueKey(org.openforis.collect.persistence.jooq.tables.TaxonName.TAXON_NAME, org.openforis.collect.persistence.jooq.tables.TaxonName.TAXON_NAME.ID);
	public static final org.jooq.UniqueKey<org.openforis.collect.persistence.jooq.tables.records.TaxonomyRecord> PK_taxonomy = createUniqueKey(org.openforis.collect.persistence.jooq.tables.Taxonomy.TAXONOMY, org.openforis.collect.persistence.jooq.tables.Taxonomy.TAXONOMY.ID);
	public static final org.jooq.UniqueKey<org.openforis.collect.persistence.jooq.tables.records.UserAccountRecord> PK_user = createUniqueKey(org.openforis.collect.persistence.jooq.tables.UserAccount.USER_ACCOUNT, org.openforis.collect.persistence.jooq.tables.UserAccount.USER_ACCOUNT.ID);
	public static final org.jooq.UniqueKey<org.openforis.collect.persistence.jooq.tables.records.UserRoleRecord> PK_user_role = createUniqueKey(org.openforis.collect.persistence.jooq.tables.UserRole.USER_ROLE, org.openforis.collect.persistence.jooq.tables.UserRole.USER_ROLE.ID);

	// FOREIGN KEY definitions
	public static final org.jooq.ForeignKey<org.openforis.collect.persistence.jooq.tables.records.DataRecord, org.openforis.collect.persistence.jooq.tables.records.RecordRecord> FK_data_record = createForeignKey(PK_record, org.openforis.collect.persistence.jooq.tables.Data.DATA, org.openforis.collect.persistence.jooq.tables.Data.DATA.RECORD_ID);
	public static final org.jooq.ForeignKey<org.openforis.collect.persistence.jooq.tables.records.DataRecord, org.openforis.collect.persistence.jooq.tables.records.SchemaDefinitionRecord> FK_data_schema_definition = createForeignKey(PK_schema_definition, org.openforis.collect.persistence.jooq.tables.Data.DATA, org.openforis.collect.persistence.jooq.tables.Data.DATA.DEFINITION_ID);
	public static final org.jooq.ForeignKey<org.openforis.collect.persistence.jooq.tables.records.DataRecord, org.openforis.collect.persistence.jooq.tables.records.TaxonRecord> FK_data_taxon = createForeignKey(PK_taxon, org.openforis.collect.persistence.jooq.tables.Data.DATA, org.openforis.collect.persistence.jooq.tables.Data.DATA.TAXON_ID);
	public static final org.jooq.ForeignKey<org.openforis.collect.persistence.jooq.tables.records.DataRecord, org.openforis.collect.persistence.jooq.tables.records.DataRecord> FK_data_parent = createForeignKey(PK_data, org.openforis.collect.persistence.jooq.tables.Data.DATA, org.openforis.collect.persistence.jooq.tables.Data.DATA.PARENT_ID);
	public static final org.jooq.ForeignKey<org.openforis.collect.persistence.jooq.tables.records.RecordRecord, org.openforis.collect.persistence.jooq.tables.records.SchemaDefinitionRecord> FK_record_root_entity = createForeignKey(PK_schema_definition, org.openforis.collect.persistence.jooq.tables.Record.RECORD, org.openforis.collect.persistence.jooq.tables.Record.RECORD.ROOT_ENTITY_ID);
	public static final org.jooq.ForeignKey<org.openforis.collect.persistence.jooq.tables.records.RecordRecord, org.openforis.collect.persistence.jooq.tables.records.UserAccountRecord> FK_record_created_by_user = createForeignKey(PK_user, org.openforis.collect.persistence.jooq.tables.Record.RECORD, org.openforis.collect.persistence.jooq.tables.Record.RECORD.CREATED_BY_ID);
	public static final org.jooq.ForeignKey<org.openforis.collect.persistence.jooq.tables.records.RecordRecord, org.openforis.collect.persistence.jooq.tables.records.UserAccountRecord> FK_record_modified_by_user = createForeignKey(PK_user, org.openforis.collect.persistence.jooq.tables.Record.RECORD, org.openforis.collect.persistence.jooq.tables.Record.RECORD.MODIFIED_BY_ID);
	public static final org.jooq.ForeignKey<org.openforis.collect.persistence.jooq.tables.records.RecordRecord, org.openforis.collect.persistence.jooq.tables.records.UserAccountRecord> FK_record_locked_by_user = createForeignKey(PK_user, org.openforis.collect.persistence.jooq.tables.Record.RECORD, org.openforis.collect.persistence.jooq.tables.Record.RECORD.LOCKED_BY_ID);
	public static final org.jooq.ForeignKey<org.openforis.collect.persistence.jooq.tables.records.SchemaDefinitionRecord, org.openforis.collect.persistence.jooq.tables.records.SurveyRecord> FK_schema_definition_survey = createForeignKey(PK_survey, org.openforis.collect.persistence.jooq.tables.SchemaDefinition.SCHEMA_DEFINITION, org.openforis.collect.persistence.jooq.tables.SchemaDefinition.SCHEMA_DEFINITION.SURVEY_ID);
	public static final org.jooq.ForeignKey<org.openforis.collect.persistence.jooq.tables.records.TaxonRecord, org.openforis.collect.persistence.jooq.tables.records.TaxonomyRecord> FK_taxon_taxonomy = createForeignKey(PK_taxonomy, org.openforis.collect.persistence.jooq.tables.Taxon.TAXON, org.openforis.collect.persistence.jooq.tables.Taxon.TAXON.TAXONOMY_ID);
	public static final org.jooq.ForeignKey<org.openforis.collect.persistence.jooq.tables.records.TaxonNameRecord, org.openforis.collect.persistence.jooq.tables.records.TaxonRecord> FK_taxon_name_taxon = createForeignKey(PK_taxon, org.openforis.collect.persistence.jooq.tables.TaxonName.TAXON_NAME, org.openforis.collect.persistence.jooq.tables.TaxonName.TAXON_NAME.TAXON_ID);
	public static final org.jooq.ForeignKey<org.openforis.collect.persistence.jooq.tables.records.UserRoleRecord, org.openforis.collect.persistence.jooq.tables.records.UserAccountRecord> FK_user_user_role = createForeignKey(PK_user, org.openforis.collect.persistence.jooq.tables.UserRole.USER_ROLE, org.openforis.collect.persistence.jooq.tables.UserRole.USER_ROLE.USER_ID);

	/**
	 * No instances
	 */
	private Keys() {}
}
